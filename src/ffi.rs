/* automatically generated by rust-bindgen */

pub type size_t = ::libc::c_ulong;
pub enum FILE {}

pub type Enum_Unnamed1 = ::libc::c_uint;
pub const CMARK_NODE_DOCUMENT: ::libc::c_uint = 0;
pub const CMARK_NODE_BQUOTE: ::libc::c_uint = 1;
pub const CMARK_NODE_LIST: ::libc::c_uint = 2;
pub const CMARK_NODE_LIST_ITEM: ::libc::c_uint = 3;
pub const CMARK_NODE_FENCED_CODE: ::libc::c_uint = 4;
pub const CMARK_NODE_INDENTED_CODE: ::libc::c_uint = 5;
pub const CMARK_NODE_HTML: ::libc::c_uint = 6;
pub const CMARK_NODE_PARAGRAPH: ::libc::c_uint = 7;
pub const CMARK_NODE_ATX_HEADER: ::libc::c_uint = 8;
pub const CMARK_NODE_SETEXT_HEADER: ::libc::c_uint = 9;
pub const CMARK_NODE_HRULE: ::libc::c_uint = 10;
pub const CMARK_NODE_REFERENCE_DEF: ::libc::c_uint = 11;
pub const CMARK_NODE_FIRST_BLOCK: ::libc::c_uint = 0;
pub const CMARK_NODE_LAST_BLOCK: ::libc::c_uint = 11;
pub const CMARK_NODE_STRING: ::libc::c_uint = 12;
pub const CMARK_NODE_SOFTBREAK: ::libc::c_uint = 13;
pub const CMARK_NODE_LINEBREAK: ::libc::c_uint = 14;
pub const CMARK_NODE_INLINE_CODE: ::libc::c_uint = 15;
pub const CMARK_NODE_INLINE_HTML: ::libc::c_uint = 16;
pub const CMARK_NODE_EMPH: ::libc::c_uint = 17;
pub const CMARK_NODE_STRONG: ::libc::c_uint = 18;
pub const CMARK_NODE_LINK: ::libc::c_uint = 19;
pub const CMARK_NODE_IMAGE: ::libc::c_uint = 20;
pub const CMARK_NODE_FIRST_INLINE: ::libc::c_uint = 12;
pub const CMARK_NODE_LAST_INLINE: ::libc::c_uint = 20;
pub type cmark_node_type = Enum_Unnamed1;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const CMARK_NO_LIST: ::libc::c_uint = 0;
pub const CMARK_BULLET_LIST: ::libc::c_uint = 1;
pub const CMARK_ORDERED_LIST: ::libc::c_uint = 2;
pub type cmark_list_type = Enum_Unnamed2;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const CMARK_PERIOD_DELIM: ::libc::c_uint = 0;
pub const CMARK_PAREN_DELIM: ::libc::c_uint = 1;
pub type cmark_delim_type = Enum_Unnamed3;
pub enum Struct_cmark_node { }
pub type cmark_node = Struct_cmark_node;
pub enum Struct_cmark_doc_parser { }
pub type cmark_doc_parser = Struct_cmark_doc_parser;
#[link(name = "cmark")]
extern "C" { }
#[link(name = "cmark")]
extern "C" {
    pub fn cmark_node_new(_type: cmark_node_type) -> *mut cmark_node;
    pub fn cmark_node_destroy(node: *mut cmark_node);
    pub fn cmark_free_nodes(e: *mut cmark_node);
    pub fn cmark_node_next(node: *mut cmark_node) -> *mut cmark_node;
    pub fn cmark_node_previous(node: *mut cmark_node) -> *mut cmark_node;
    pub fn cmark_node_parent(node: *mut cmark_node) -> *mut cmark_node;
    pub fn cmark_node_first_child(node: *mut cmark_node) -> *mut cmark_node;
    pub fn cmark_node_last_child(node: *mut cmark_node) -> *mut cmark_node;
    pub fn cmark_node_get_type(node: *mut cmark_node) -> cmark_node_type;
    pub fn cmark_node_get_string_content(node: *mut cmark_node)
     -> *const ::libc::c_char;
    pub fn cmark_node_set_string_content(node: *mut cmark_node,
                                         content: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmark_node_get_header_level(node: *mut cmark_node)
     -> ::libc::c_int;
    pub fn cmark_node_set_header_level(node: *mut cmark_node,
                                       level: ::libc::c_int) -> ::libc::c_int;
    pub fn cmark_node_get_list_type(node: *mut cmark_node) -> cmark_list_type;
    pub fn cmark_node_set_list_type(node: *mut cmark_node,
                                    _type: cmark_list_type) -> ::libc::c_int;
    pub fn cmark_node_get_list_start(node: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_set_list_start(node: *mut cmark_node,
                                     start: ::libc::c_int) -> ::libc::c_int;
    pub fn cmark_node_get_list_tight(node: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_set_list_tight(node: *mut cmark_node,
                                     tight: ::libc::c_int) -> ::libc::c_int;
    pub fn cmark_node_get_fence_info(node: *mut cmark_node)
     -> *const ::libc::c_char;
    pub fn cmark_node_set_fence_info(node: *mut cmark_node,
                                     info: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmark_node_get_url(node: *mut cmark_node) -> *const ::libc::c_char;
    pub fn cmark_node_set_url(node: *mut cmark_node,
                              url: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cmark_node_get_title(node: *mut cmark_node)
     -> *const ::libc::c_char;
    pub fn cmark_node_set_title(node: *mut cmark_node,
                                title: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmark_node_get_start_line(node: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_get_start_column(node: *mut cmark_node)
     -> ::libc::c_int;
    pub fn cmark_node_get_end_line(node: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_unlink(node: *mut cmark_node);
    pub fn cmark_node_insert_before(node: *mut cmark_node,
                                    sibling: *mut cmark_node)
     -> ::libc::c_int;
    pub fn cmark_node_insert_after(node: *mut cmark_node,
                                   sibling: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_prepend_child(node: *mut cmark_node,
                                    child: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_node_append_child(node: *mut cmark_node,
                                   child: *mut cmark_node) -> ::libc::c_int;
    pub fn cmark_new_doc_parser() -> *mut cmark_doc_parser;
    pub fn cmark_free_doc_parser(parser: *mut cmark_doc_parser);
    pub fn cmark_finish(parser: *mut cmark_doc_parser) -> *mut cmark_node;
    pub fn cmark_process_line(parser: *mut cmark_doc_parser,
                              buffer: *const ::libc::c_uchar, bytes: size_t);
    pub fn cmark_parse_document(buffer: *const ::libc::c_uchar, len: size_t)
     -> *mut cmark_node;
    pub fn cmark_parse_file(f: *mut FILE) -> *mut cmark_node;
    pub fn cmark_debug_print(root: *mut cmark_node);
    pub fn cmark_render_html(root: *mut cmark_node) -> *mut ::libc::c_uchar;
    pub fn cmark_markdown_to_html(text: *mut ::libc::c_uchar,
                                  len: ::libc::c_int) -> *mut ::libc::c_uchar;
}
